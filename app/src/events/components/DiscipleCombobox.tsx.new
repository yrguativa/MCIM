import * as React from "react";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useDebounce } from "@/lib/hooks/use-debounce";
import { useDiscipleStore } from "@/src/stores";

interface DiscipleComboboxProps {
  onSelect: (value: string) => void;
  value?: string;
  placeholder?: string;
}

export function DiscipleCombobox({ onSelect, value, placeholder }: DiscipleComboboxProps) {
  const [open, setOpen] = React.useState(false);
  const [search, setSearch] = React.useState("");
  const debouncedSearch = useDebounce(search, 300);
  const searchDisciples = useDiscipleStore(state => state.searchDisciples);
  const disciples = useDiscipleStore(state => state.searchResults);

  React.useEffect(() => {
    if (debouncedSearch) {
      searchDisciples(debouncedSearch);
    }
  }, [debouncedSearch, searchDisciples]);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
        >
          {value
            ? disciples.find((disciple) => disciple.id === value)?.name || value
            : placeholder || "Select disciple..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0">
        <Command>
          <CommandInput 
            placeholder="Search disciples..." 
            value={search}
            onValueChange={setSearch}
          />
          <CommandEmpty>No disciples found.</CommandEmpty>
          <CommandGroup>
            {disciples.map((disciple) => (
              <CommandItem
                key={disciple.id}
                value={disciple.id}
                onSelect={(currentValue) => {
                  onSelect(currentValue);
                  setOpen(false);
                }}
              >
                <Check
                  className={cn(
                    "mr-2 h-4 w-4",
                    value === disciple.id ? "opacity-100" : "opacity-0"
                  )}
                />
                {disciple.name} {disciple.lastName}
              </CommandItem>
            ))}
          </CommandGroup>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
